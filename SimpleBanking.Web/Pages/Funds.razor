@page "/funds"
@using Microsoft.AspNetCore.Identity
@using SimpleBanking.Web.Data.Models
@using SimpleBanking.Web.Models
@using SimpleBanking.Web.Models.ValidationModels
@using SimpleBanking.Web.Services.Contracts
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject UserManager<ApplicationUser> UserManager
@inject ITransactionService TransactionService

<link href="css/custom-css/funds-style.css" rel="stylesheet" />

<PageTitle>Funds</PageTitle>

@if (IsUserAuthenticated())
{

    <EditForm OnValidSubmit="InitiateTransfer" Model="@_InputModel" OnInvalidSubmit="ClearResultMessage">
        <DataAnnotationsValidator />

        <h5 style="text-align:center; font-weight:bold;">Balance: @_result.NewBalance</h5>
        <hr />

        <MudAutocomplete Class="label-input-wrapper"
                     Label="Select receiver email"
                     @bind-Value="_InputModel.DebtorEmail"
                     SearchFunc="@SearchReceiverEmail"
                     T="string"
                     Margin="Margin.Normal" Dense="false" Variant="Variant.Outlined" ShowProgressIndicator="true" />
        <hr />

        <MudTextField Class="label-input-wrapper"
                  Label="Amount"
                  @bind-Value="_InputModel.Amount"
                  Placeholder="0.00"
                  Format="F2" Variant="Variant.Text" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AttachMoney" />
        <hr />

        <MudButton ButtonType="ButtonType.Submit" Disabled="@_processing" Variant="Variant.Filled" Color="Color.Primary" EndIcon="@Icons.Material.Filled.Send">
            @if (_processing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Processing</MudText>
            }
            else
            {
                <MudText>Send Funds</MudText>
            }
        </MudButton>

        <div class="custom-validation-summary">
            <ValidationSummary />
            <h5 style="color: @(_result.Success ? "green" : "red")">@_result.Message</h5>
        </div>
    </EditForm>


    <h4 style="text-align:center;">Transaction History</h4>
    <div style="width: 30%;">
        <MudDateRangePicker @bind-DateRange="DateRangeHandler" DisableToolbar="true" Label="Range"  />
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Amount</th>
                <th>Type</th>
                <th>Date</th>
                <th>From/To</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in _transactions)
            {
                <tr>
                    <td>@transaction.Id</td>
                    <td style="color: @(transaction.IsIncomingTransfer ? "green" : "red")">$@(transaction.Amount)</td>
                    <td>@transaction.Type</td>
                    <td>@transaction.Date</td>
                    <td>@transaction.OppositeUserEmail</td>
                    <td>@(transaction.IsIncomingTransfer ? "Incoming" : "Outgoing")</td>
                </tr>
            }
        </tbody>
    </table>

    <div style="text-align:center;">
        <MudPagination SelectedChanged="@OnPageChange" Count="@_totalPages" Variant="Variant.Filled" Color="Color.Primary" />
    </div>
}
else
{
    <h5 style="color: red;">Please, log-in first</h5>
}


@code {
    // Default range is the transactions from 30 days ago
    private DateRange _dateRange = new DateRange(DateTime.UtcNow.AddDays(-30), DateTime.UtcNow);
    private bool _processing = false;

    // Pagination
    private int _totalPages = 1;
    private int _selectedPage = 1;
    private int _pageCount = 5;

    // Auth
    private AuthenticationState _authState;

    // Form
    private TransactionTransferModel _InputModel = new TransactionTransferModel();
    private string _creditorEmail = string.Empty;
    private TransactionResult _result = new TransactionResult { Success = false, Message = string.Empty, NewBalance = 0.00M };

    private ICollection<string> _userEmails = new HashSet<string>();
    private ICollection<TransactionHistory> _transactions = new HashSet<TransactionHistory>();

    public DateRange DateRangeHandler
    {
        get { return _dateRange; }
        set
        {
            _dateRange = value;
            SetTransactionHistory(value.Start, value.End);
            SetTotalPages();
        }
    }

    protected async override Task OnInitializedAsync()
    {
        _authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();

        if (!IsUserAuthenticated())
        {
            return;
        }

        var creditorName = _authState.User.Identity!.Name;
        var creditor = await UserManager.FindByNameAsync(creditorName);
        _creditorEmail = creditor.Email;

        _result.NewBalance = creditor.Balance;

        _userEmails = UserManager.Users.Where(x => x.Email != creditorName).Select(x => x.Email).ToArray();
        SetTransactionHistory(_dateRange.Start, _dateRange.End);
        SetTotalPages();

        if (!_userEmails.Any())
        {
            _result.Message = ConstantMessages.NoUsers;
        }
    }

    async Task InitiateTransfer()
    {
        _processing = true;

        await Task.Run(async () =>
        {
            _result = TransactionService.Transfer(_InputModel.DebtorEmail, _creditorEmail, _InputModel.Amount);

            if (_result.Success)
            {
                SetTransactionHistory(_dateRange.Start, _dateRange.End, _selectedPage);
                SetTotalPages();
            }

            _InputModel = new TransactionTransferModel();

            await Task.Delay(1000);
        });

        _processing = false;
    }

    private void ClearResultMessage()
    {
        _result.Message = string.Empty;
    }

    private bool IsUserAuthenticated()
    {
        return (_authState.User != null &&
                _authState.User.Identity != null &&
                _authState.User.Identity.IsAuthenticated);
    }

    private void OnPageChange(int pageNumber)
    {
        _selectedPage = pageNumber;
        SetTransactionHistory(_dateRange.Start, _dateRange.End, pageNumber);
    }

    private async Task<IEnumerable<string>> SearchReceiverEmail(string value)
    {
        if (string.IsNullOrEmpty(value))
            return _userEmails.Take(5);

        return _userEmails.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase)).Take(5);
    }

    private void SetTransactionHistory(DateTime? dateStart, DateTime? dateEnd, int pageNumber = 1)
    {
        _transactions = TransactionService.GetTransactionHistory(_creditorEmail, pageNumber, _pageCount, dateStart, dateEnd);
    }

    private void SetTotalPages()
    {
        _totalPages = TransactionService.GetTransactionsTotalPages(_creditorEmail, _pageCount, _dateRange.Start, _dateRange.End);
    }
}