@page "/funds"
@using Microsoft.AspNetCore.Identity
@using SimpleBanking.Web.Data.Models
@using SimpleBanking.Web.Models
@using SimpleBanking.Web.Models.ValidationModels
@using SimpleBanking.Web.Services.Contracts
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject UserManager<ApplicationUser> UserManager
@inject ITransactionService TransactionService

<style>
    .custom-validation-summary {
        font-size: 1.2rem;
        margin-top: 20px;
    }

        .custom-validation-summary > ul {
            list-style-type: none;
            padding-left: 0px;
        }

    .validation-message{
        color: red;
    }

    .label-input {
        font-size: large;
    }

    .label-input-wrapper {
        display: flex;
        justify-content: space-between;
        width: 35%;
    }

    .input-btn {
        padding: 5px 15px;
        font-size: 24px;
        cursor: pointer;
        border-radius: 15px;
        border-bottom-left-radius: 0;
        transition: all 0.3s;
        background-color: #3a0647;
        color:white;
    }

        .input-btn:hover {
            border-radius: 0px;
        }
</style>

<PageTitle>Funds</PageTitle>

@if (IsUserAuthenticated())
{

    <EditForm Model="@Model" OnValidSubmit="InitiateTransfer" OnInvalidSubmit="ClearResultMessage">
        <DataAnnotationsValidator />

        <h5 style="text-align:center; font-weight:bold;">Balance: @result.NewBalance</h5>
        <hr />

        <div class="label-input-wrapper">
            <label class="label-input">Transfer Funds To:</label>
            <input class="label-input" onchange="@SetDebtorEmail" placeholder="Search user.." type="text" list="user-search" />
        </div>
        <hr />

        <datalist id="user-search">
            @if (userEmails.Any())
            {
                @foreach (var email in userEmails)
                {
                    <option value="@email">@email</option>
                }
            }
        </datalist>

        <div class="label-input-wrapper">
            <label class="label-input">Amount</label>
            <input class="label-input" placeholder="Enter amount" onchange="@SetAmount" type="number" step=".01" pattern="^\d*(\.\d{0,2})?$" min="0.00"/>
        </div>

        <hr />

        <input class="input-btn" type="submit" value="Send" />

        <div class="custom-validation-summary">
            <ValidationSummary />
            <h5 style="color: @(result.Success ? "green" : "red")">@result.Message</h5>
        </div>
    </EditForm>

    <h4 style="text-align:center;">Transaction History</h4>
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Amount</th>
                <th>Type</th>
                <th>Date</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in transactions)
            {
                <tr>
                    <td>@transaction.Id</td>
                    <td style="color: @(transaction.IsIncomingTransfer ? "green" : "red")">@transaction.Amount</td>
                    <td>@transaction.Type</td>
                    <td>@transaction.Date</td>
                    <td>@(transaction.IsIncomingTransfer ? "Incoming" : "Outgoing")</td>
                </tr>
            }
        </tbody>
    </table>

    <div style="text-align:center;">
        <MudPagination Variant="Variant.Filled" Color="Color.Primary" Count="@totalPages" SelectedChanged="@OnPageChange" />
    </div>
}
else
{
    <h5 style="color: red;">Please, log-in first</h5>
}


@code {
    private int totalPages = 1;
    private int selectedPage = 1;
    private int pageCount = 7;

    private AuthenticationState authState;
    private TransactionTransferModel Model = new TransactionTransferModel();

    private string creditorEmail = string.Empty;
    private decimal? amount = null;
    private TransactionResult result = new TransactionResult { Success = false, Message = string.Empty, NewBalance = 0.00M };

    private ICollection<string> userEmails = new HashSet<string>();
    private ICollection<TransactionHistory> transactions = new HashSet<TransactionHistory>();

    protected async override Task OnInitializedAsync()
    {
        authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();

        if (!IsUserAuthenticated())
        {
            return;
        }

        var creditorName = authState.User.Identity!.Name;
        var creditor = await UserManager.FindByNameAsync(creditorName);
        creditorEmail = creditor.Email;

        result.NewBalance = creditor.Balance;

        userEmails = UserManager.Users.Where(x => x.Email != creditorName).Select(x => x.Email).ToList();
        transactions = TransactionService.GetTransactionHistory(creditorEmail, 1, pageCount);
        totalPages = TransactionService.GetTransactionsTotalPages(creditorEmail, pageCount);

        if (!userEmails.Any())
        {
            result.Message = ConstantMessages.NoUsers;
        }
    }

    private void SetDebtorEmail(ChangeEventArgs e)
    {
        Model.DebtorEmail = e.Value.ToString();
    }

    private void SetAmount(ChangeEventArgs e)
    {
        Model.Amount = decimal.Parse(e.Value.ToString());
    }

    private void InitiateTransfer()
    {
        result = TransactionService.Transfer(Model.DebtorEmail, creditorEmail, Model.Amount);
        transactions = TransactionService.GetTransactionHistory(creditorEmail, 1, pageCount);
        totalPages = TransactionService.GetTransactionsTotalPages(creditorEmail, pageCount);

        Model = new TransactionTransferModel();
    }

    private void ClearResultMessage()
    {
        result.Message = string.Empty;
    }

    private bool IsUserAuthenticated()
    {
        return (authState.User != null &&
                authState.User.Identity != null &&
                authState.User.Identity.IsAuthenticated);
    }

    private void OnPageChange(int pageNumber)
    {
        transactions = TransactionService.GetTransactionHistory(creditorEmail, pageNumber, pageCount);
    }
}
