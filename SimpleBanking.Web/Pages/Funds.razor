@page "/funds"
@using Microsoft.AspNetCore.Identity
@using SimpleBanking.Web.Data.Models
@using SimpleBanking.Web.Models
@using SimpleBanking.Web.Models.ValidationModels
@using SimpleBanking.Web.Services.Contracts
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject UserManager<ApplicationUser> UserManager
@inject ITransactionService TransactionService

<link href="css/custom-css/funds-style.css" rel="stylesheet" />

<PageTitle>Funds</PageTitle>

@if (IsUserAuthenticated())
{

    <EditForm Model="@_InputModel" OnInvalidSubmit="ClearResultMessage">
        <DataAnnotationsValidator />

        <h5 style="text-align:center; font-weight:bold;">Balance: @_result.NewBalance</h5>
        <hr />

        <div class="label-input-wrapper">
            <label class="label-input">Transfer Funds To:</label>
            <input class="label-input" onchange="@SetDebtorEmail" placeholder="Search user.." type="text" list="user-search" />
        </div>
        <hr />

        <datalist id="user-search">
            @if (_userEmails.Any())
            {
                @foreach (var email in _userEmails)
                {
                    <option value="@email">@email</option>
                }
            }
        </datalist>

        <MudTextField Class="label-input-wrapper" Placeholder="0.00" Format="F2" @bind-Value="_InputModel.Amount" Label="Amount" Variant="Variant.Text" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AttachMoney" />

        <hr />

        <MudButton Disabled="@_processing" OnClick="InitiateTransfer" Variant="Variant.Filled" Color="Color.Primary" EndIcon="@Icons.Material.Filled.Send">
            @if (_processing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Processing</MudText>
            }
            else
            {
                <MudText>Send</MudText>
            }
        </MudButton>

        <div class="custom-validation-summary">
            <ValidationSummary />
            <h5 style="color: @(_result.Success ? "green" : "red")">@_result.Message</h5>
        </div>
    </EditForm>

    <h4 style="text-align:center;">Transaction History</h4>
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Amount</th>
                <th>Type</th>
                <th>Date</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in _transactions)
            {
                <tr>
                    <td>@transaction.Id</td>
                    <td style="color: @(transaction.IsIncomingTransfer ? "green" : "red")">@transaction.Amount</td>
                    <td>@transaction.Type</td>
                    <td>@transaction.Date</td>
                    <td>@(transaction.IsIncomingTransfer ? "Incoming" : "Outgoing")</td>
                </tr>
            }
        </tbody>
    </table>

    <div style="text-align:center;">
        <MudPagination Variant="Variant.Filled" Color="Color.Primary" Count="@_totalPages" SelectedChanged="@OnPageChange" />
    </div>
}
else
{
    <h5 style="color: red;">Please, log-in first</h5>
}


@code {
    private bool _processing = false;

    // Pagination
    private int _totalPages = 1;
    private int _selectedPage = 1;
    private int _pageCount = 7;

    // Auth
    private AuthenticationState _authState;

    // Form
    private TransactionTransferModel _InputModel = new TransactionTransferModel();
    private string _creditorEmail = string.Empty;
    private TransactionResult _result = new TransactionResult { Success = false, Message = string.Empty, NewBalance = 0.00M };

    private ICollection<string> _userEmails = new HashSet<string>();
    private ICollection<TransactionHistory> _transactions = new HashSet<TransactionHistory>();

    protected async override Task OnInitializedAsync()
    {
        _authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();

        if (!IsUserAuthenticated())
        {
            return;
        }

        var creditorName = _authState.User.Identity!.Name;
        var creditor = await UserManager.FindByNameAsync(creditorName);
        _creditorEmail = creditor.Email;

        _result.NewBalance = creditor.Balance;

        _userEmails = UserManager.Users.Where(x => x.Email != creditorName).Select(x => x.Email).ToList();
        _transactions = TransactionService.GetTransactionHistory(_creditorEmail, 1, _pageCount);
        _totalPages = TransactionService.GetTransactionsTotalPages(_creditorEmail, _pageCount);

        if (!_userEmails.Any())
        {
            _result.Message = ConstantMessages.NoUsers;
        }
    }

    private void SetDebtorEmail(ChangeEventArgs e)
    {
        _InputModel.DebtorEmail = e.Value.ToString();
    }

    async Task InitiateTransfer()
    {
        _processing = true;

        await Task.Run(async () =>
        {
            _result = TransactionService.Transfer(_InputModel.DebtorEmail, _creditorEmail, _InputModel.Amount);

            if (_result.Success)
            {
                _transactions = TransactionService.GetTransactionHistory(_creditorEmail, _selectedPage, _pageCount);
                _totalPages = TransactionService.GetTransactionsTotalPages(_creditorEmail, _pageCount);
            }

            _InputModel = new TransactionTransferModel();

            await Task.Delay(1000);
        });

        _processing = false;
    }

    private void ClearResultMessage()
    {
        _result.Message = string.Empty;
    }

    private bool IsUserAuthenticated()
    {
        return (_authState.User != null &&
                _authState.User.Identity != null &&
                _authState.User.Identity.IsAuthenticated);
    }

    private void OnPageChange(int pageNumber)
    {
        _selectedPage = pageNumber;
        _transactions = TransactionService.GetTransactionHistory(_creditorEmail, pageNumber, _pageCount);
    }
}